begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::Test)
        ::Sorbet::Private::Static.keep_for_ide(::Test)
        <emptyTree>
      end
    end
  end
  class ::Test<<C Test>> < (::<todo sym>)
    def foo(x, <blk>)
      x
    end

    def bar(y, <blk>)
      y
    end

    def qux(z, <blk>)
      z
    end

    def baz(w, <blk>)
      w
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params({:"x" => ::String}).returns(::String)
        end
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params({:"y" => ::String}).returns(::String)
        end
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params({:"z" => ::String}).returns(::String)
        end
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params({:"w" => ::String}).returns(::String)
        end
        <self>.extend(::T::Sig)
        ::Sorbet::Private::Static.keep_def(<self>, :"foo")
        ::Sorbet::Private::Static.keep_def(<self>, :"bar")
        ::Sorbet::Private::Static.keep_def(<self>, :"qux")
        ::Sorbet::Private::Static.keep_def(<self>, :"baz")
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
