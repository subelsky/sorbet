class <emptyTree><<C <root>>> < (::<todo sym>)
  <self>.require_relative("../../t")

  module <emptyTree>::<C Foo><<C <todo sym>>> < ()
    class <emptyTree>::<C Struct><<C <todo sym>>> < (::<todo sym>)
    end
  end

  class <emptyTree>::<C NotStruct><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C B> = <emptyTree>::<C T>.let(<emptyTree>::<C Foo>::<C Struct>.new(), <emptyTree>::<C Foo>::<C Struct>)

    var = <emptyTree>::<C Struct>.new(:"foo")
  end

  class <emptyTree>::<C RealStruct><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C A><<C <todo sym>>> < (::<root>::<C Struct>)
      def foo<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def foo=<<C <todo sym>>>(foo, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def bar<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def bar=<<C <todo sym>>>(bar, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"foo" => ::BasicObject, :"bar" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, bar = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")

      ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end

    class <emptyTree>::<C KeywordInit><<C <todo sym>>> < (::<root>::<C Struct>)
      def foo<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def foo=<<C <todo sym>>>(foo, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def bar<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def bar=<<C <todo sym>>>(bar, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"foo" => ::BasicObject, :"bar" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo: = nil, bar: = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")

      ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end
  end

  class <emptyTree>::<C RealStructDesugar><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C A><<C <todo sym>>> < (<emptyTree>::<C Struct>)
      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def bar<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      def foo=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      def bar=<<C <todo sym>>>(arg0, &<blk>)
        arg0
      end

      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.params({:"foo" => <emptyTree>::<C BasicObject>, :"bar" => <emptyTree>::<C BasicObject>}).returns(<emptyTree>::<C A>)
      end

      def self.new<<C <todo sym>>>(foo = nil, bar = nil, &<blk>)
        <emptyTree>::<C T>.cast(nil, <emptyTree>::<C A>)
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar")

      ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar=")

      ::Sorbet::Private::Static.keep_self_def(<self>, :"new")
    end
  end

  class <emptyTree>::<C TwoStructs><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C A><<C <todo sym>>> < (::<root>::<C Struct>)
      def foo<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def foo=<<C <todo sym>>>(foo, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"foo" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")

      ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end

    class <emptyTree>::<C B><<C <todo sym>>> < (::<root>::<C Struct>)
      def foo<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def foo=<<C <todo sym>>>(foo, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"foo" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")

      ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end
  end

  class <emptyTree>::<C AccidentallyStruct><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C Struct><<C <todo sym>>> < (::<todo sym>)
    end

    class <emptyTree>::<C A><<C <todo sym>>> < (::<root>::<C Struct>)
      def foo<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def foo=<<C <todo sym>>>(foo, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def bar<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def bar=<<C <todo sym>>>(bar, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"foo" => ::BasicObject, :"bar" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(foo = nil, bar = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")

      ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar")

      ::Sorbet::Private::Static.keep_def(<self>, :"bar=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end
  end

  class <emptyTree>::<C MixinStruct><<C <todo sym>>> < (::<todo sym>)
    module <emptyTree>::<C MyMixin><<C <todo sym>>> < ()
      def foo<<C <todo sym>>>(&<blk>)
        <emptyTree>
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"foo")
    end

    class <emptyTree>::<C MyStruct><<C <todo sym>>> < (::<root>::<C Struct>)
      def x<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def x=<<C <todo sym>>>(x, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"x" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(x = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"x")

      ::Sorbet::Private::Static.keep_def(<self>, :"x=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      <self>.include(<emptyTree>::<C MyMixin>)

      ::<Magic>.<self-new>(<self>).x()

      ::<Magic>.<self-new>(<self>).foo()

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end

    class <emptyTree>::<C MyKeywordInitStruct><<C <todo sym>>> < (::<root>::<C Struct>)
      def x<<C <todo sym>>>(&<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      def x=<<C <todo sym>>>(x, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.params({:"x" => ::BasicObject}).void()
      end

      def initialize<<C <todo sym>>>(x: = nil, &<blk>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end

      ::Sorbet::Private::Static.keep_def(<self>, :"x")

      ::Sorbet::Private::Static.keep_def(<self>, :"x=")

      <emptyTree>::<C Elem> = <self>.type_member({:"fixed" => ::T.untyped()})

      <self>.include(<emptyTree>::<C MyMixin>)

      ::<Magic>.<self-new>(<self>).x()

      ::<Magic>.<self-new>(<self>).foo()

      ::<Magic>.<self-new>(<self>, 1, 2)

      ::<Magic>.<self-new>(<self>, {:"giberish" => 1})

      ::Sorbet::Private::Static.keep_def(<self>, :"initialize")
    end

    <emptyTree>::<C MyKeywordInitStruct>.new(1, 2)

    <emptyTree>::<C MyKeywordInitStruct>.new({:"giberish" => 1})

    <emptyTree>::<C MyStruct>.new().x()

    <emptyTree>::<C MyStruct>.new().foo()
  end

  class <emptyTree>::<C BadUsages><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C A> = <emptyTree>::<C Struct>.new()

    <emptyTree>::<C B> = <emptyTree>::<C Struct>.new({:"giberish" => 1})

    <emptyTree>::<C C> = <emptyTree>::<C Struct>.new({:"keyword_init" => true})

    local = true

    <emptyTree>::<C D> = <emptyTree>::<C Struct>.new({:"keyword_init" => local})

    <emptyTree>::<C E> = <emptyTree>::<C Struct>.new(:"a", {:"keyword_init" => local})
  end

  class <emptyTree>::<C Main><<C <todo sym>>> < (::<todo sym>)
    def main<<C <todo sym>>>(&<blk>)
      begin
        a = <emptyTree>::<C Struct>.new(:"foo")
        <emptyTree>::<C T>.assert_type!(a, <emptyTree>::<C Struct>)
        <emptyTree>::<C T>.assert_type!(a.new(), <emptyTree>::<C Struct>)
        <emptyTree>::<C T>.assert_type!(a.new(2), <emptyTree>::<C Struct>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C A>.new(2, 3), <emptyTree>::<C RealStruct>::<C A>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C A>.new(2), <emptyTree>::<C RealStruct>::<C A>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C KeywordInit>.new(), <emptyTree>::<C RealStruct>::<C KeywordInit>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C KeywordInit>.new({:"foo" => 1}), <emptyTree>::<C RealStruct>::<C KeywordInit>)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStruct>::<C KeywordInit>.new({:"foo" => 2, :"bar" => 3}), <emptyTree>::<C RealStruct>::<C KeywordInit>)
        <emptyTree>::<C RealStruct>::<C KeywordInit>.new(1, 2)
        <emptyTree>::<C T>.assert_type!(<emptyTree>::<C RealStructDesugar>::<C A>.new(2, 3), <emptyTree>::<C RealStructDesugar>::<C A>)
      end
    end

    ::Sorbet::Private::Static.keep_def(<self>, :"main")
  end

  <self>.puts(<emptyTree>::<C Main>.new().main())
end
