class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C SomeDefault><<C <todo sym>>> < (<emptyTree>::<C T>::<C Struct>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params({:"foo" => <emptyTree>::<C Integer>, :"bar" => <emptyTree>::<C T>::<C Boolean>}).void()
    end

    def initialize<<C <todo sym>>>(foo:, bar: = false, &<blk>)
      begin
        @foo = ::T.let(foo, <emptyTree>::<C Integer>)
        @bar = ::T.let(bar, <emptyTree>::<C T>::<C Boolean>)
        <self>.super(ZSuperArgs)
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def foo<<C <todo sym>>>(&<blk>)
      @foo
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params({:"arg0" => <emptyTree>::<C Integer>}).returns(<emptyTree>::<C Integer>)
    end

    def foo=<<C <todo sym>>>(arg0, &<blk>)
      @foo = arg0
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params({}).returns(<emptyTree>::<C T>::<C Boolean>)
    end

    def bar<<C <todo sym>>>(&<blk>)
      @bar
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params({:"arg0" => <emptyTree>::<C T>::<C Boolean>}).returns(<emptyTree>::<C T>::<C Boolean>)
    end

    def bar=<<C <todo sym>>>(arg0, &<blk>)
      @bar = arg0
    end

    ::Sorbet::Private::Static.keep_def(<self>, :"initialize")

    <self>.prop(:"foo", <emptyTree>::<C Integer>, {:"without_accessors" => true})

    ::Sorbet::Private::Static.keep_def(<self>, :"foo")

    ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

    <self>.prop(:"bar", <emptyTree>::<C T>::<C Boolean>, {:"default" => false, :"without_accessors" => true})

    ::Sorbet::Private::Static.keep_def(<self>, :"bar")

    ::Sorbet::Private::Static.keep_def(<self>, :"bar=")
  end

  <emptyTree>::<C SomeDefault>.new({:"foo" => 1})

  <emptyTree>::<C SomeDefault>.new({:"foo" => 2, :"bar" => true})

  <emptyTree>::<C SomeDefault>.new({:"foo" => 3, :"bar" => false})

  <emptyTree>::<C SomeDefault>.new()
end
